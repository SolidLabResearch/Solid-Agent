@prefix : <http://example.org/socrates#>.
@prefix acl: <http://www.w3.org/ns/auth/acl#>.
@prefix ex:   <http://example.org/> .
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix func: <http://www.w3.org/2007/rif-builtin-function#>.
@prefix ids: <https://w3id.org/idsa/core/> .
@prefix idsc: <https://w3id.org/idsa/code/> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix odrl: <http://www.w3.org/ns/odrl/2/> .
@prefix pol:  <https://www.example.org/ns/policy#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix time: <http://www.w3.org/2000/10/swap/time#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# eye rules/usage-control/timeRules.n3 --quiet --nope --pass

# adding duration with datetime and printing datetime result
{
    "<lol>" time:localTime ?test.
    (?test 0) math:sum ?something .
    (?test "PT1M30.5S"^^xsd:duration ) math:sum ?lol .
    #(?test "PT1M30.5S"^^xsd:duration ) func:add-dayTimeDuration-to-dateTime ?lol .
} => {
    :asdf :currentTime ?test.
    :asdf :currentTimeInteger ?something . # in seconds since 1970-1-1T00:00:00Z
    :asdf :timePlusDuration ?lol .
} .

{
    :test log:uuid ?Y . #
    ( "urn:uuid:" ?Y ) string:concatenation ?YT .
    ?cronPolicyUUID log:uri ?YT .
}
=>
{
    :Result :uuid ?cronPolicyUUID .
    :Result :urnString ?YT .
    :Result :uuidString ?Y .

} .

# Add dayTimeDuration with datetime Note: using func:add-dayTimeDuration-to-dateTime does not give (ms) precision only (s) precision (rounded down)
{
    "" time:localTime ?X .
    (?X "P1D"^^xsd:dayTimeDuration) func:add-dayTimeDuration-to-dateTime ?X2 .
}
=>
{
    :test :now ?X .
    :test :later ?X2 .
}.

:duration :value "PT1M30.5S"^^xsd:duration .

{
    "" time:localTime ?X .
    :duration :value ?D .
    (?DVal ?DType)  log:dtlit ?D .
    (?DVal xsd:dayTimeDuration) log:dtlit ?DNew .
    (?X ?DNew) func:add-dayTimeDuration-to-dateTime ?X2 .
}
=>
{
    :result :now ?X .
    :result :later ?X2 .
}.

#Attempt as rule for uuidIRI
# { 
#     ?random ex:uuidIRI ?uuid.
# 
# } <= {
#     :random log:uuid ?Y .
#     ( "urn:uuid:" ?Y ) string:concatenation ?YT .
#     ?uuid log:uri ?YT .
# }

# Ruben Dedecker with time
#{
#  <<?s foaf:age ?age>> :trueAtTime ?date.
#} <= {
#  # This doesn't account for leap years.
#  ((?date ?s!foaf:birthday)!math:difference 31536000) math:integerQuotient ?age .
#} .

:jesse foaf:birthday "2000-04-06"^^xsd:date .

#{
#  1000 log:repeat ?age .
#  <<?s foaf:age ?age>> :trueAtTime ""!time:localTime .
#} => {
#  <<?s foaf:age ?age>> :valid :inMyContext .
#} .
